{"version":3,"sources":["components/formEdit.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","backButton","marginRight","spacing","instructions","border","borderRadius","marginLeft","minHeight","textField","typography1","textAlign","paddingLeft","typography2","formgroup1","FormEditComponent","classes","React","useState","activeStep","setActiveStep","steps","handleNext","prevActiveStep","handleBack","className","Stepper","alternativeLabel","map","label","Step","key","StepLabel","length","Button","onClick","Paper","stepIndex","d","fetch","then","response","json","data","catch","error","console","List","component","index","ListItem","button","ListItemIcon","fontSize","color","ListItemText","primary","secondary","page","Typography","FormGroup","item","FormControlLabel","control","TextField","required","id","margin","type","defaultValue","Checkbox","labelPlacement","value","Divider","variant","getStepContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b36f2bec.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport InsertDriveFileOutlinedIcon from '@material-ui/icons/InsertDriveFileOutlined';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '90%',\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    border:'1px solid #eee',\n    borderRadius:'5px',\n    width:'65%',\n    marginLeft:'auto',\n    marginRight:'auto',\n    minHeight:'70vh'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '65%',\n  },\n  typography1:{\n    width:'95%',\n    textAlign:'left',\n    paddingLeft:theme.spacing(1)\n},\ntypography2:{\n    textAlign:'left',\n    paddingLeft:theme.spacing(10)\n},\nformgroup1:{\n      marginLeft:theme.spacing(10)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select File', 'Select Form', 'Edit information or export pdf'];\n}\n\n\nexport default function FormEditComponent() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const getStepContent = (stepIndex) => {\n    switch (stepIndex) {\n      case 0:\n            var d = [];\n            fetch('http://localhost:5000/api/form/')\n            .then(response=>response.json())\n            .then(data=>d=data)\n            .catch(error => console.error('Unable to load.', error))\n        return (\n          <List  component=\"nav\">\n                {d.map(index =>(\n                    <ListItem button onClick={handleNext}>\n                    <ListItemIcon>\n                        <ListAltIcon fontSize='large' color={index==='1022'?'primary':'grey'} />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={`File ${index}`}\n                        secondary='Click here...'\n                    />\n                    </ListItem>\n                ))}\n          </List>);\n      case 1:\n        return (\n          <List  component=\"nav\">\n              <ListItem button onClick={handleBack}>\n                  <ListItemIcon>\n                    <ArrowBackIcon fontSize='large' color='secondary' />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary='Back to File List'\n                  />\n              </ListItem>\n          {[1,2,3,4,5].map(page =>(\n              <ListItem button  onClick={page===3 && handleNext}>\n              <ListItemIcon>\n                  <InsertDriveFileOutlinedIcon  fontSize='large' color={page===3?'primary':'grey'} />\n              </ListItemIcon>\n              <ListItemText\n                  primary={`Page ${page}`}\n                  secondary={page===3?'Click here for more...':''}\n              />\n              </ListItem>\n          ))}\n          </List>);\n      case 2:\n        return (\n            <div>\n                <List  component=\"nav\">\n                    <ListItem button onClick={handleBack}>\n                        <ListItemIcon>\n                            <ArrowBackIcon fontSize='large' color='secondary' />\n                        </ListItemIcon>\n                        <ListItemText \n                            primary='Back to File List'\n                        />\n                    </ListItem>\n                </List>\n                <Typography className={classes.typography1}>\n                    1.Your Full Name    \n                    <FormGroup className={classes.formgroup1}>\n                    {['Family Name','Given Names'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>\n                </Typography>\n                <Typography className={classes.typography1}>\n                    2.Date of birth\n                    <FormGroup className={classes.formgroup1}>\n                    {['Birthday'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"date\"\n                            label={item}\n                            type=\"date\"\n                            defaultValue=\"2017-05-24\"\n                            className={classes.textField}\n                            margin=\"normal\"\n                        />\n                        }\n                    />\n                    ))}\n                    </FormGroup>                    \n                </Typography>\n                <Typography className={classes.typography1}>\n                    3.Place of birth    \n                    <FormGroup className={classes.formgroup1}>\n                    {['Town/city','Country'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>                    \n                </Typography>\n                <Typography className={classes.typography1}>\n                    4.Relationship status\n                    <FormGroup className={classes.formgroup1}>\n                    {['Married','Engaged','De facto','Separated','Divorced','Widowed','Never married or been in a de facto relationship'].map(item=>(\n                        <FormControlLabel\n                        control={<Checkbox \n                            // checked={gilad} \n                            // onChange={handleChange('gilad')} \n                            color='primary'\n                            labelPlacement=\"bottom\"\n                            value={item} />}\n                        label={item}\n                    />\n                    ))}\n                    </FormGroup>\n                </Typography>\n                <Typography className={classes.typography1}>\n                    5.Details from your passport\n                    <FormGroup className={classes.formgroup1}>\n                    {['Passport number','Country of passport'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>       \n                </Typography>\n                <Typography className={classes.typography1}>\n                    6.Details of identity card or identity number issued to you by your government (if applicable) eg. National identity card.<br />\n                    <b>Note:</b> If you are the holder of multiple identity numbers because you are a citizen of more than one country, you need to enter the identity number on the card from the country that you live in.\n                    <FormGroup className={classes.formgroup1}>\n                    {['Identity number','Country of issue'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>       \n                </Typography>\n                <Typography className={classes.typography1}>\n                    7.Your present country of citizenship\n                    <FormGroup className={classes.formgroup1}>\n                    {[''].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>       \n                </Typography>                \n                <Typography className={classes.typography1}>\n                    8.Your current residential address<br />\n                    <b>Note:</b> A post office box address is not acceptable as a residential address\n                    <FormGroup className={classes.formgroup1}>\n                    {['','','','Postcode'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>       \n                </Typography>\n                <Typography className={classes.typography1}>\n                    9.Address for correspondence<br />\n                    <i>(If the same as your residential address, write ‘AS ABOVE’)</i>\n                    <FormGroup className={classes.formgroup1}>\n                    {['','','','Postcode'].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>       \n                </Typography>\n                <Typography className={classes.typography1}>\n                    10.Your telephone numbers\n                    <FormGroup className={classes.formgroup1}>\n                    {['Office hours','After hours'].map(item=>(\n                        <div>\n                            {item}\n                            <TextField\n                            id=\"standard-required\"\n                            label='Country code'\n                            margin=\"normal\"/>\n                            <TextField\n                            id=\"standard-required\"\n                            label='Area code'\n                            margin=\"normal\"/>\n                            <TextField\n                            id=\"standard-required\"\n                            label='Number'\n                            margin=\"normal\"/>\n                        </div>\n                    ))}\n                    </FormGroup>       \n                </Typography>\n                <Typography className={classes.typography1}>\n                    11.Do you agree to the Department communicating with you by fax, email or other electronic means?\n                    <FormGroup className={classes.formgroup1}>\n                    {['No','Yes & Giv details'].map(item=>(\n                        <FormControlLabel\n                        control={<Checkbox \n                            // checked={gilad} \n                            // onChange={handleChange('gilad')} \n                            color='primary'\n                            labelPlacement=\"right\"\n                            value={item} />}\n                        label={item} />\n                    ))}\n                    </FormGroup>       \n                </Typography>                \n                <Typography className={classes.typography2}>\n                    <FormGroup className={classes.formgroup1}>\n                        <FormControlLabel\n                        control={<div>\n                            Fax Number\n                            <TextField\n                            id=\"standard-required\"\n                            label='Country code'\n                            margin=\"normal\"/>\n                            <TextField\n                            id=\"standard-required\"\n                            label='Area code'\n                            margin=\"normal\"/>\n                            <TextField\n                            id=\"standard-required\"\n                            label='Number'\n                            margin=\"normal\"/>\n                        </div>}\n                        />\n                        <FormControlLabel\n                        control={<div>\n                            Email address\n                            <TextField\n                                id=\"standard-required\"\n                                label='Email address'\n                                margin=\"normal\"/>\n                            </div>                                \n                        }>\n                        </FormControlLabel>\n                    </FormGroup>       \n                </Typography>\n                <Typography className={classes.typography1}>\n                    12.Client number or file number issued to you by the Department <i>(if known)</i>\n                    <FormGroup className={classes.formgroup1}>\n                    {[''].map(item=>(\n                        <FormControlLabel\n                        control={\n                            <TextField\n                            required\n                            id=\"standard-required\"\n                            label={item}\n                            className={classes.textField}\n                            margin=\"normal\"/>\n                        }\n                    />\n                    ))}\n                    </FormGroup>       \n                </Typography>\n                <Divider variant=\"middle\" />                \n                    <Button variant=\"contained\" color='primary' className={classes.backButton}>Save My Info</Button>\n                    <Button variant=\"contained\" color='secondary'  className={classes.backButton}>Export PDF</Button>\n                <Divider variant=\"middle\" />                \n            </div>\n        );\n      default:\n        return 'Unknown stepIndex';\n    }\n  };\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} alternativeLabel>\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n            <Button onClick={handleReset}>Reset</Button>\n        ) : (\n            <Paper className={classes.instructions}>{getStepContent(activeStep)}</Paper>\n        )}\n      </div>\n      \n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\n\nimport 'typeface-roboto';\nimport FormEditComponent from \"./components/formEdit.jsx\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FormEditComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}